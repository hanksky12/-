data()
data("iris")
ls()
"iris"
iris
class(iris)
str(iris)
summary(iris)
class(2.3)
class(3)
1==c(1)
1L
"TRUE"
"T"
T
TRUE
"dsfdf"
class("fdsf")
numeric(5)
x=c(2,1,5)
x=c(2,1,5)
y=c(3,5,2)
x+y
x-y
x*y
x/y
x=c(2,1,5)
y=c(3,5,2)
x+y
x-y
x*y
x/y
x+10
x+c(10)
x+c(2,1)
x+c(2,1,2)
x=c(2,1,5)
y=c(3,5,2)
x+y
x-y
x*y
x/y
x=c(2,3,4,5)
x+10
x+c(10)
x+c(2,1)
x+c(2,1,2,1)
length(x)
c(1,2,3,4)
c(c(1),c(2),c(3),c(4))
hight=c(120,110,180)
names(hight)=c("sky","hank","GG")
hight
names(hight)
#判斷向量內容
c(1,5)>c(0,7)
hight>115
hight=120
hight=120
hight=c(120,110,180)
hight==120
hight>115|hight<160
hight>115|hight<160  #或 or
hight>115&hight<160  #和 and
names(hight)=c("sky","hank","GG")
hight>115|hight<160  #或 or
hight>115&hight<160  #和 and
#篩選
hight[]
#篩選
hight[1]
hight[c(1,3)]
hight[1,3]
#hight[1,3]  2維的列行表示  用在1維ERROR
hight["hank"]
#hight[1,3]  2維的列行表示  用在1維ERROR
hight[c("hank","GG")] #用元素名稱
hight[hight>110]
#BMI
w=c(73,87,43)
name(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
name(h)=c("Brian","Toby","Sherry")
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
BMI=w/((h/100)*(h/100))
BMI[BMI<18.5&BMI>=24]
BMI[BMI<18.5&BMI>=24]
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
BMI=w/((h/100)*(h/100))
BMI[BMI<18.5&BMI>=24]
h/100
h/100*h/100
w/(h/100*h/100)
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
every_BMI=w/((h/100)*(h/100))
every_BMI[BMI<18.5&BMI>=24]
every_BMI
every_BMI[every_BMI<18.5&every_BMI>=24]
every_BMI[every_BMI<18.5|every_BMI>=24]
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
BMI=w/((h/100)*(h/100))
BMI[BMI<18.5|BMI>=24]
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
BMI=w/((h/100)^2
BMI[BMI<18.5|BMI>=24]
w=c(73,87,43)
names(w)=c("Brian","Toby","Sherry")
h=c(180,169,173)
names(h)=c("Brian","Toby","Sherry")
BMI=w/(h/100)^2
BMI[BMI<18.5|BMI>=24]
?seq()
#seq()
seq(from=1,to=20)
for(i in seq(from=1,to=20)){print(i)}
seq(from=2,to=20,by=2)
seq(from=2,to=20,length.out = 2)
seq(from=1,to=20,length.out = 5)
1:20
20:1
#rep()
?rep()
#rep()
rep(x=c(1),times=5)
rep(x=c(1,2),times=5)
rep(x=c(1,2),length=5)
rep(x=c(1,2),each=5)
rep(x=c(1,2),times=c(1,2))
#paste()
"dsfdf"+"fsdf"
#paste()
#"dsfdf"+"fsdf" ERROR
paste("dsfdf","fsdf")
length(paste("dsfdf","fsdf"))
paste("dsfdf","fsdf",sep="")
paste("dsfdf","fsdf",sep="@")
paste(c("H","f"),1:2)
paste(c("H","f"),1:2,sep="_")
length(c("H","f"),1:2,sep="_")
length(c("H","f"),1:2)
length(paste(c("H","f"),1:2,sep="_"))
paste(c("H","f"),1:2,sep="_",collapse = "$$")
?matrix
#Matrix
matrix(1:9,nrow = 3,ncol=3)
matrix(1:9,nrow = 3)
matrix(1:9,nrow = 3,byrow=T)
class(matrix)
class(a)
a=matrix(1:9,nrow = 3,byrow=T) #預設byrow=FALSE
class(a)
c(h,w)
matrix(data=c(h,w),nrow=3,byrow=F)
mat=matrix(data=c(h,w),nrow=3,byrow=F)
rownames(mat)=c("Brian","Toby","Sherry")
colnames(mat)=c("hight","weight")
mat
dim(mat)
nrow(mat)
ncol(mat)
t(mat)#轉置
t(mat)#轉置
mat[1,]
mat[,1]#抓第一行
mat[c(1,2),1]
mat[1:2,1]#同上
mat[1:2,1]#結果同上  可用來抓區段的資料 上面寫法粉累
mat["Brian"]
mat[mat[1,]>170]
mat[,mat[1,]>170]
mat[mat[,1]>170,]
mat[c("Brian")]
mat[Brian]
mat["Brian",]
#新增row
mat
mat2=rbind(mat,c(200,70))
mat2
rownames(mat2)
rownames(mat2)[4]="Sam"
rownames(mat2)
mat3
mat3=cbind(mat2,c(1,2,3,4))
mat3
colnames(mat3)[ncol(mat3)]="不知道"
mat3
#加總 row or col
colSums(mat3)
rowSums(mat3)
#平均 row or col
colMeans(mat3)
m1=matrix(1:4,byrow=T,nrow=2)
m2=matrix(5:8,byrow=T,nrow=2)
m1
m2
m1+m2
m1-m2
m1*m2
m1/m2
m1%*%m2 #矩陣乘積 m1Xm2   注意兩矩陣的列行數 能不能相乘
m1=c(85,73)
m2=c(72,64)
m3=c(59,66)
M1(c(m1,m2,m3),byrow=T,nrow=3)
m1=c(85,73)
m2=c(72,64)
m3=c(59,66)
M=matrix(c(m1,m2,m3),byrow=T,nrow=3)
M
m1=c(85,73)
m2=c(72,64)
m3=c(59,66)
ma=matrix(c(m1,m2,m3),byrow=T,nrow=3)
ma
w=c(0.4,0.6)
wa=matrix(w,nrow=2,byrow=T)
wa
ma%*%wa
final=ma%*%wa
rownames(final)=c("kevin","marry","jerry")
colnames(final)=c("總成績")
final
weather=c("sunny","rainy","cloudy","rainy","cloudy")
weath_cat=factor(weather)
weath_cat
class(weather)
class(weath_cat)
class(weath_cat)
tmp=c("low","high","mid","high","mid","high")
tmp_cat=factor(tmp,ordered = T,levels = c("low","mid","high"))
tmp_cat
weather=c("s","r","c","r","c")
weath_cat=factor(weather)
weath_cat
levels(weath_cat)=c("cloudy","rainy","sunny")
weath_cat
#type priority
c("string",1+2i,5.5,TRUE) #轉換順序character>complex>numic>BOOL
c(1+2i,5.5,TRUE)
c(5.5,TRUE)
data()
m1=c(85,73)
m2=c(72,64)
m3=c(59,66)
ma=matrix(c(m1,m2,m3),byrow=T,nrow=3)
ma
w=c(0.4,0.6)
wa=matrix(w,nrow=2)
wa
final=ma%*%wa
rownames(final)=c("kevin","marry","jerry")
colnames(final)=c("總成績")
final
str(final)
summary(final)
2^10
logical(5)
x=c(10,20,30,5)
y=100
x+y
y=c(1)
x+y
y=c(1,2,3)
x+y
length(x)
c(x,15)
sum(x)
str(df)
y=c(1,2)
as.data.frame(y)
str(y)
x=c(1,3)
y[,1]
a=y[,1]
a=y[,0]
names(y)=c(a,b)
names(y)=c("a","b")
y
dat=c("mon","tue","wed","thu","fri")
age=c(28,26,34,12,22)
df=data.frame(dat,age)
df
y=c(1,2,3,4,5)
df[,1]
df[,3]=y
df
df1=data.frame(cust_id=c(1:6),pro=c(rep("巧克力",3),rep("香蕉",3)))
df2=data.frame(cust_id=c(1:3),name=c("小王","小名","老王"))
#Inner join:
merge(x = df1, y= df2, by="cust_id")
merge(x=df2,y=df1,by="cust_id")
install.packages("animation")
library("animation")
kmeans.ani()
speed=c("慢","中","快")
sf=factor(speed)
sf
sf[]1
sf[1]
sf[1]>sf[2]
sf=factor(speed,order=T,levels = c("慢","中","快"))
sf[1]>sf[2]
class(sf)
sf=factor(speed,levels = c("慢","中","快"))
class(sf)
sf=factor(speed,order=F,levels = c("慢","中","快"))
class(sf)
sf=factor(speed,levels = c("慢","中","快"))
sf[1]>sf[2]
dat=c("mon","tue","wed","thu","fri")
age=c(28,26,34,12,22)
df
df=data.frame(dat,age)
df$dat[1:3]
df[1:3,1]
>y=data.frame(T_ID=c(3,4,5), T_name=c("Tony","Orozco","Justine"), Birthday=as.Date(c("1990-12-20","1989-2-21","1987-5-2")) )
y=data.frame(T_ID=c(3,4,5), T_name=c("Tony","Orozco","Justine"), Birthday=as.Date(c("1990-12-20","1989-2-21","1987-5-2")) )
y[,c(2,3)]
y
y$T_ID
setwd("E:/BIG DATA下載/DM")
source("trycatch1.r",echo=T)
a
a
source("trycatch1.r",echo=T)
a
tryCatch(
{ x = "1"
z = sqrt(x) },
#遇到 warning 時的自訂處理函數
warning = function(msg) { message(paste("[Warning]",msg,"\n")) return(NULL) },
#遇到 error 時的自訂處理函數
error = function(msg) { message(paste("[Error]",msg,"\n")) return(NA) }
)
ifelse(exists("z"),z,"z does not exist!")
a= x
a
tryCatch(
{ x = "1"
z = sqrt(x) },
#遇到 warning 時的自訂處理函數
warning = function(msg) { message(paste("[Warning]",msg,"\n")) return(NULL) },
#遇到 error 時的自訂處理函數
error = function(msg) { message(paste("[Error]",msg,"\n")) return(NA) }
)
ifelse(exists("z"),z,"z does not exist!")
a= x
a
tryCatch(
{ x = "1"
z = sqrt(x) },
#遇到 warning 時的自訂處理函數
warning = function(msg) { message(paste("[Warning]",msg,"\n")) return(NULL) },
#遇到 error 時的自訂處理函數
error = function(msg) { message(paste("[Error]",msg,"\n")) return(NA) }
)
ifelse(exists("z"),z,"z does not exist!")
a= x
a
source("trycatch1.r",echo = T)
source("trycatch1.r",echo = T)
tryCatch(
{ x = "1"
z = sqrt(x) },
#?? warning ???閮???
warning = function(msg){ message(paste("[Warning]",msg,"\n")) return(NULL) },
#?? error ???閮???
error = function(msg){ message(paste("[Error]",msg,"\n")) return(NA) }
)
source("trycatch1.r",echo = T)
source("trycatch2.r",echo = T)
source("trycatch2.r",echo = T)
source("trycatch2.r",echo = T)
source("trycatch2.r",echo = T)
source("trycatch2.r",echo = T)
source("trycatch2.r",echo = T)
data=c(1,2,3,6,3)
scale(data,center = T,scale = T)
attr(,"scaled:center")
tmp=c(2,3,8,na,4,na,9,12,na)
is.na(tmp)
tmp=c(2,3,8,NA,4,NA,9,12,NA)#na要大寫
is.na(tmp)
any(is.na(tmp))
sum(is.na(tmp))
is.nan(0/0)
is.infinite(1/0)
summary(tmp)
install.packages("mice")
library(mice)
install.packages("missForest")
library(mice)
library(missForest)
library(mice)
data=prodNA(iris,noNA = 0.05)
complete.cases(data)
summary(data)
install.packages("VIM")
library(VIM)
#圖形化檢視遺漏值
agg=aggr(data,col=("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#檢視遺漏值
summary(data)
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.9,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.5,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("green","red"),numbers=T,sortVars=T,labels=names(data),cex.axis=.7,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("yellow","purple"),numbers=T,sortVars=T,labels=names(data),cex.axis=.7,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("rose","purple"),numbers=T,sortVars=T,labels=names(data),cex.axis=.7,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("azure","purple"),numbers=T,sortVars=T,labels=names(data),cex.axis=.7,gap=4,ylab=c("好棒棒","我是右邊"))
#圖形化檢視遺漏值
agg=aggr(data,col=c("yellow","purple"),numbers=T,sortVars=T,labels=names(data),cex.axis=.7,gap=4,ylab=c("好棒棒","我是右邊"))
#刪除所有遺漏值資料
n_data=data[complete.cases(data),]
summary(n_data)
is.na(tmp)
class(is.na(tmp) )
nn_data=data
# 算出各欄的平均數
new_data1.mean_col_1 <- mean(new_data1[, 1], na.rm = T)
new_data1.mean_col_2 <- mean(new_data1[, 2], na.rm = T)
new_data1.mean_col_3 <- mean(new_data1[, 3], na.rm = T)
new_data1.mean_col_4 <- mean(new_data1[, 4], na.rm = T)
# 取出各欄位中有遺漏值的“列位置”
na.rows1 <- is.na(new_data1[, 1])
na.rows2 <- is.na(new_data1[, 2])
na.rows3 <- is.na(new_data1[, 3])
na.rows4 <- is.na(new_data1[, 4])
#用平均數取代遺漏值
new_data1[na.rows1,1] <- new_data1.mean_col_1
new_data1[na.rows2,2] <- new_data1.mean_col_2
new_data1[na.rows3,3] <- new_data1.mean_col_3
new_data1[na.rows4,4] <- new_data1.mean_col_4
new_data1=data
# 算出各欄的平均數
new_data1.mean_col_1 <- mean(new_data1[, 1], na.rm = T)
new_data1.mean_col_2 <- mean(new_data1[, 2], na.rm = T)
new_data1.mean_col_3 <- mean(new_data1[, 3], na.rm = T)
new_data1.mean_col_4 <- mean(new_data1[, 4], na.rm = T)
# 取出各欄位中有遺漏值的“列位置”
na.rows1 <- is.na(new_data1[, 1])
na.rows2 <- is.na(new_data1[, 2])
na.rows3 <- is.na(new_data1[, 3])
na.rows4 <- is.na(new_data1[, 4])
#用平均數取代遺漏值
new_data1[na.rows1,1] <- new_data1.mean_col_1
new_data1[na.rows2,2] <- new_data1.mean_col_2
new_data1[na.rows3,3] <- new_data1.mean_col_3
new_data1[na.rows4,4] <- new_data1.mean_col_4
summary(new_data1)
####################利用資料探勘模型來取代遺漏
mic=mice(data,m=3,maxit = 30,method = "cart",seed=188)
n_data1=complete(mic,1)
n_data2=complete(mic,2)
n_data3=complete(mic,3)
t_data=n_data1
kmeans(t_data[-5],nstart = 20,centers = 5)
summary(data)
View(n_data1)
summary(n_data1)
t_data=n_data2
kmeans(t_data[-5],nstart = 20,centers = 5)
summary(n_data1)
t_data=n_data3
kmeans(t_data[-5],nstart = 20,centers = 5)
summary(n_data1)
View(n_data2)
summary(n_data1)
summary(n_data2)
summary(n_data3)
#用隨機森林演算法 補完遺漏值 三種份數
mic=mice(data,m=3,maxit = 30,method = "rf",seed=188)
nn_data1=complete(mic,1)
nn_data2=complete(mic,2)
nn_data3=complete(mic,3)
View(nn_data)
View(nn_data1)
View(nn_data2)
summary(nn_data1)
summary(nn_data2)
summary(nn_data3)
summary(n_data1)
summary(n_data2)
summary(n_data3)
